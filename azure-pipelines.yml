trigger:
  - main

pool:
  name: Azure Pipelines
  demands:
    - agent.name -equals Hosted Agent

variables:
  buildDirectory: 'target'

steps:
- checkout: self

# Check if Maven is installed and install if necessary
- script: |
    mvn -version || (
      echo "Maven is not installed. Installing Maven..."
      choco install maven
    )
  displayName: 'Check and Install Maven'

# Build the Spring Boot application with Maven
- script: |
    echo "Current directory: $(pwd)"
    echo "Contents of $(Build.SourcesDirectory):"
    ls -la "$(Build.SourcesDirectory)"
    echo "Contents of $(Build.SourcesDirectory)/MyFit:"
    ls -la "$(Build.SourcesDirectory)/MyFit"
    echo "Building Spring Boot application..."
    cd "$(Build.SourcesDirectory)"
    cd MyFit || { echo "Failed to change directory to MyFit"; exit 1; }
    echo "Current directory: $(pwd)"
    echo "Running Maven..."
    mvn clean package -DskipTests
  displayName: 'Build Spring Boot application with Maven'


# Deploy the built application to the production directory using robocopy
- script: |
    robocopy "$(Build.SourcesDirectory)/$(buildDirectory)" "$(productionDirectory)" /MIR /NP /LOG:robocopy_backend.log
    if ERRORLEVEL 1 (
        echo "Deployment failed with error level: %ERRORLEVEL%"
        exit 1
    ) else (
        echo "Deployment successful"
    )
  displayName: 'Deploy application to production directory'
  continueOnError: false

# Publish build artifacts (logs)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\robocopy_backend.log'
    ArtifactName: 'deployment_backend_logs'
    publishLocation: 'container'
  condition: succeededOrFailed()


# Cleanup build artifacts
- script: |
    echo "Cleaning up build artifacts..."
    rmdir /S /Q "$(Build.SourcesDirectory)/$(buildDirectory)"
  displayName: 'Post-build cleanup'
